generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")   // pooled
  directUrl = env("DIRECT_URL")     // unpooled
}

model User {
  id                 Int       @id @default(autoincrement())
  email              String    @unique
  name               String
  passwordHash       String

  // Let op: 'money' mapt op bestaande kolom 'actionPoints'
  money              Int       @default(50) @map("actionPoints")
  lastActionReset    DateTime  @default(now())
  influence          Int       @default(0)

  // Earn-acties (cooldown-timestamps)
  lastNepfactuurAt    DateTime?
  lastVriendjeAt      DateTime?
  lastParkeerboeteAt  DateTime?
  lastDonatieAt       DateTime?
  lastStemmenhandelAt DateTime?

  investigationUntil DateTime?
  votes              Int       @default(0)
  level              Int       @default(1)
  levelProgress      Float     @default(0)
  dossiers           Int       @default(0)
  hpBP               Int       @default(10000)
  eliminatedAt       DateTime?

  passivePerHour     Int       @default(0)
  lastPassiveAt      DateTime?

  // NIEUW:
  civilServants      Int       @default(0)
  workspaceUnits     Int       @default(0)

  investigators      Int       @default(0)
  investigatorsBusy  Int       @default(0)

  memberships                Membership[]
  actions                    ActionLog[]
  ownedParties               Party[]          @relation("PartyOwner")
  privileges                 UserPrivilege[]
  investigationsStarted      Investigation[]  @relation("InvestigatorAttacker")
  investigationsTargeted     Investigation[]  @relation("InvestigatorTarget")

  // Back-relation naar UserConnection
  connections                UserConnection[]

  createdAt          DateTime  @default(now())

  @@index([votes, money])
  @@index([level, levelProgress])
}

model UserPrivilege {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  key         String
  purchasedAt DateTime @default(now())

  @@unique([userId, key])
}

model Party {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  color       String
  ideology    String?
  ownerId     Int
  owner       User     @relation("PartyOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  memberships Membership[]
  createdAt   DateTime @default(now())
}

model Membership {
  id       Int      @id @default(autoincrement())
  userId   Int
  partyId  Int
  role     String   @default("MEMBER")
  joinedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  party    Party    @relation(fields: [partyId], references: [id], onDelete: Cascade)

  @@unique([userId, partyId])
}

model ActionLog {
  id              Int      @id @default(autoincrement())
  userId          Int
  type            String
  cost            Int
  influenceChange Int
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Investigation {
  id          Int      @id @default(autoincrement())
  attackerId  Int
  targetId    Int
  assigned    Int
  startedAt   DateTime @default(now())
  etaAt       DateTime
  completedAt DateTime?
  consumedAt  DateTime?
  attacker    User     @relation("InvestigatorAttacker", fields: [attackerId], references: [id], onDelete: Cascade)
  target      User     @relation("InvestigatorTarget", fields: [targetId], references: [id], onDelete: Cascade)

  @@index([attackerId, targetId, etaAt])
}

// ───────────────────────────────────────────────────────────────────────────────
// UserConnection (level start op 0)
// ───────────────────────────────────────────────────────────────────────────────
model UserConnection {
  id                 Int       @id @default(autoincrement())
  userId             Int
  key                String
  level              Int       @default(0)   // start nu bij 0
  progressBps        Int       @default(0)   // 10000 = 100%
  unlockedAt         DateTime?
  lastProgressAt     DateTime?
  discountBps        Int?                    // optioneel
  discountValidUntil DateTime?
  lastConnectAt      DateTime?

  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key])
}
